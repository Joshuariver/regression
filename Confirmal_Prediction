---
title: "Conformal prediction"
output: html_notebook
---


잘 알려진 R 패키지인 forecast 에는 2 가지의 인터페이스가 있다.


# forecast::thetaf와 같은 기능을 동시에 적합 및 추론하는 직접 인터페이스

```{r}
nile.fcast <- forecast::thetaf(Nile)
plot(nile.fcast)
```


# forecast::ets와 같이 먼저 적합한 다음 예측하는 인터페이스로, 이 경우 forecast::forecast를 추가로 사용해야 합니다.

```{r}
fit <- forecast::ets(USAccDeaths)
plot(forecast::forecast(fit))
```
#0. 패키지 설치

```{r}
# utils::install.packages(c("remotes", "e1071", "forecast", "glmnet"))
# remotes::install_github("Techtonique/ahead")

library(ahead)
library(forecast)

y <- fdeaths #AirPassengers #Nile #mdeaths #fdeaths #USAccDeaths
h <- 25L
```

1-1. 기본 패러미터 사용하기
```{r}
par(mfrow=c(2, 2))
plot(ahead::genericforecast(FUN=forecast::thetaf, y, h))
plot(ahead::genericforecast(FUN=forecast::meanf, y, h))
plot(ahead::genericforecast(FUN=forecast::rwf, y, h))
plot(ahead::genericforecast(FUN=forecast::ets, y, h))

par(mfrow=c(2, 2))
plot(ahead::genericforecast(FUN=forecast::tbats, y, h))
plot(ahead::genericforecast(FUN=HoltWinters, y, h))
plot(ahead::genericforecast(FUN=forecast::Arima, y, h))
plot(ahead::genericforecast(FUN=ahead::dynrmf, y, h))
```
1-2. 추가적인 패러미터 부가 예측
```{r}
par(mfrow=c(2, 2))
plot(ahead::genericforecast(FUN=ahead::dynrmf, y=y, h=h, 
                            fit_func=e1071::svm, predict_func=predict))
plot(ahead::genericforecast(FUN=ahead::dynrmf, y=y, h=h, 
                            fit_func=glmnet::cv.glmnet, predict_func=predict))
plot(ahead::genericforecast(FUN=forecast::tbats, y=y, h=h, 
                            use.box.cox = TRUE, use.trend=FALSE))
plot(ahead::genericforecast(FUN=forecast::rwf, 
                            y=y, h=h, lambda=1.1))
```
# 2 - Conformal prediction
2 - 1 - Using default parameters
```{r}
y <- USAccDeaths

par(mfrow=c(3, 2))
obj <- ahead::conformalize(FUN=forecast::thetaf, y, h); plot(obj)
obj <- ahead::conformalize(FUN=forecast::meanf, y, h); plot(obj)
obj <- ahead::conformalize(FUN=forecast::rwf, y, h); plot(obj)
obj <- ahead::conformalize(FUN=forecast::ets, y, h); plot(obj)

par(mfrow=c(2, 2))
obj <- ahead::conformalize(FUN=forecast::auto.arima, y, h); plot(obj)
obj <- ahead::conformalize(FUN=forecast::tbats, y, h); plot(obj)
obj <- ahead::conformalize(FUN=HoltWinters, y, h); plot(obj)
obj <- ahead::conformalize(FUN=forecast::Arima, y, h); plot(obj)
```
2 - 2 - Using additional parameters
```{r}
y <- AirPassengers

par(mfrow=c(2, 2))
obj <- ahead::conformalize(FUN=forecast::thetaf, y, h); plot(obj)
obj <- ahead::conformalize(FUN=forecast::rwf, y=y, h=h, drift=TRUE); plot(obj)
obj <- ahead::conformalize(FUN=HoltWinters, y=y, h=h, seasonal = "mult"); plot(obj)
obj <- ahead::conformalize(FUN=ahead::dynrmf, y=y, h=h, fit_func=glmnet::cv.glmnet, predict_func=predict); plot(obj)
```
2 - 3 - Using other simulation methods (conformal prediction-based)
```{r}
y <- fdeaths

par(mfrow=c(3, 2))
obj <- ahead::conformalize(FUN=forecast::thetaf, y=y, h=h, method="block-bootstrap"); plot(obj)
obj <- ahead::conformalize(FUN=forecast::rwf, y=y, h=h, drift=TRUE, method="bootstrap"); plot(obj)
obj <- ahead::conformalize(FUN=forecast::ets, y, h, method="kde"); plot(obj)
obj <- ahead::conformalize(FUN=forecast::tbats, y=y, h=h, method="surrogate"); plot(obj)
obj <- ahead::conformalize(FUN=HoltWinters, y=y, h=h, seasonal = "mult", method="block-bootstrap"); plot(obj)
obj <- ahead::conformalize(FUN=ahead::dynrmf, y=y, h=h, fit_func=glmnet::cv.glmnet, 
                           predict_func=predict, method="surrogate"); plot(obj)
```

